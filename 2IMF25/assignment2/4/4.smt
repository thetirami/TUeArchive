(declare-const v_num Int)         ; the number of vertice
(declare-fun e (Int Int) Bool)  ; e(i, j) linked or not, i < j
(declare-fun v (Int Int) Int)   ; v(i, j) = k means vertex i is chosen k time(s), after checking edge j
(declare-fun r (Int Int) Bool)  ; choose edge (i, j) as result

(assert
    (and
        ; use e to describe the graph
        (= v_num 20)

        (= (e 1 2) true)
        (= (e 1 3) false)
        (= (e 1 4) false)
        (= (e 1 5) true)
        (= (e 1 6) true)
        (= (e 1 7) false)
        (= (e 1 8) false)
        (= (e 1 9) false)
        (= (e 1 10) false)
        (= (e 1 11) false)
        (= (e 1 12) false)
        (= (e 1 13) false)
        (= (e 1 14) false)
        (= (e 1 15) false)
        (= (e 1 16) false)
        (= (e 1 17) false)
        (= (e 1 18) false)
        (= (e 1 19) false)
        (= (e 1 20) false)
        (= (e 2 3) true)
        (= (e 2 4) false)
        (= (e 2 5) false)
        (= (e 2 6) false)
        (= (e 2 7) false)
        (= (e 2 8) true)
        (= (e 2 9) false)
        (= (e 2 10) false)
        (= (e 2 11) false)
        (= (e 2 12) false)
        (= (e 2 13) false)
        (= (e 2 14) false)
        (= (e 2 15) false)
        (= (e 2 16) false)
        (= (e 2 17) false)
        (= (e 2 18) false)
        (= (e 2 19) false)
        (= (e 2 20) false)
        (= (e 3 4) true)
        (= (e 3 5) false)
        (= (e 3 6) false)
        (= (e 3 7) false)
        (= (e 3 8) false)
        (= (e 3 9) false)
        (= (e 3 10) true)
        (= (e 3 11) false)
        (= (e 3 12) false)
        (= (e 3 13) false)
        (= (e 3 14) false)
        (= (e 3 15) false)
        (= (e 3 16) false)
        (= (e 3 17) false)
        (= (e 3 18) false)
        (= (e 3 19) false)
        (= (e 3 20) false)
        (= (e 4 5) true)
        (= (e 4 6) false)
        (= (e 4 7) false)
        (= (e 4 8) false)
        (= (e 4 9) false)
        (= (e 4 10) false)
        (= (e 4 11) false)
        (= (e 4 12) true)
        (= (e 4 13) false)
        (= (e 4 14) false)
        (= (e 4 15) false)
        (= (e 4 16) false)
        (= (e 4 17) false)
        (= (e 4 18) false)
        (= (e 4 19) false)
        (= (e 4 20) false)
        (= (e 5 6) false)
        (= (e 5 7) false)
        (= (e 5 8) false)
        (= (e 5 9) false)
        (= (e 5 10) false)
        (= (e 5 11) false)
        (= (e 5 12) false)
        (= (e 5 13) false)
        (= (e 5 14) true)
        (= (e 5 15) false)
        (= (e 5 16) false)
        (= (e 5 17) false)
        (= (e 5 18) false)
        (= (e 5 19) false)
        (= (e 5 20) false)
        (= (e 6 7) true)
        (= (e 6 8) false)
        (= (e 6 9) false)
        (= (e 6 10) false)
        (= (e 6 11) false)
        (= (e 6 12) false)
        (= (e 6 13) false)
        (= (e 6 14) false)
        (= (e 6 15) true)
        (= (e 6 16) false)
        (= (e 6 17) false)
        (= (e 6 18) false)
        (= (e 6 19) false)
        (= (e 6 20) false)
        (= (e 7 8) true)
        (= (e 7 9) false)
        (= (e 7 10) false)
        (= (e 7 11) false)
        (= (e 7 12) false)
        (= (e 7 13) false)
        (= (e 7 14) false)
        (= (e 7 15) false)
        (= (e 7 16) true)
        (= (e 7 17) false)
        (= (e 7 18) false)
        (= (e 7 19) false)
        (= (e 7 20) false)
        (= (e 8 9) true)
        (= (e 8 10) false)
        (= (e 8 11) false)
        (= (e 8 12) false)
        (= (e 8 13) false)
        (= (e 8 14) false)
        (= (e 8 15) false)
        (= (e 8 16) false)
        (= (e 8 17) false)
        (= (e 8 18) false)
        (= (e 8 19) false)
        (= (e 8 20) false)
        (= (e 9 10) true)
        (= (e 9 11) false)
        (= (e 9 12) false)
        (= (e 9 13) false)
        (= (e 9 14) false)
        (= (e 9 15) false)
        (= (e 9 16) false)
        (= (e 9 17) true)
        (= (e 9 18) false)
        (= (e 9 19) false)
        (= (e 9 20) false)
        (= (e 10 11) true)
        (= (e 10 12) false)
        (= (e 10 13) false)
        (= (e 10 14) false)
        (= (e 10 15) false)
        (= (e 10 16) false)
        (= (e 10 17) false)
        (= (e 10 18) false)
        (= (e 10 19) false)
        (= (e 10 20) false)
        (= (e 11 12) true)
        (= (e 11 13) false)
        (= (e 11 14) false)
        (= (e 11 15) false)
        (= (e 11 16) false)
        (= (e 11 17) false)
        (= (e 11 18) true)
        (= (e 11 19) false)
        (= (e 11 20) false)
        (= (e 12 13) true)
        (= (e 12 14) false)
        (= (e 12 15) false)
        (= (e 12 16) false)
        (= (e 12 17) false)
        (= (e 12 18) false)
        (= (e 12 19) false)
        (= (e 12 20) false)
        (= (e 13 14) true)
        (= (e 13 15) false)
        (= (e 13 16) false)
        (= (e 13 17) false)
        (= (e 13 18) false)
        (= (e 13 19) true)
        (= (e 13 20) false)
        (= (e 14 15) true)
        (= (e 14 16) false)
        (= (e 14 17) false)
        (= (e 14 18) false)
        (= (e 14 19) false)
        (= (e 14 20) false)
        (= (e 15 16) false)
        (= (e 15 17) false)
        (= (e 15 18) false)
        (= (e 15 19) false)
        (= (e 15 20) true)
        (= (e 16 17) true)
        (= (e 16 18) false)
        (= (e 16 19) false)
        (= (e 16 20) true)
        (= (e 17 18) true)
        (= (e 17 19) false)
        (= (e 17 20) false)
        (= (e 18 19) true)
        (= (e 18 20) false)
        (= (e 19 20) true)
    )
)

(assert
    (and
        (forall ((i Int))
        (=> (and (<= 1 i) (<= i v_num))
            (= (v i 0) 0)
        ))
    )
)

; v(i, k) = m  after checking edge k ï¼Œvertex i is chosen m time(s)
(assert
    (and
        (forall ((j Int) (k Int))
        (=> (and (<= 1 j) (<= j v_num) (< j k) (<= k v_num))
            ; curr (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j))
            ; prev (- (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j)) 1)
            ; index of this edge is (2*v_num - j)*(j - 1)/2 + (k - j)
            (ite (and (= (e j k) true) (= (r j k) true)) (and
                ; have this edge and use this edge
                (= (v j (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j))) (+ (v j (- (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j)) 1)) 1))
                (= (v k (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j))) (+ (v k (- (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j)) 1)) 1))
                (forall ((n Int))
                (=> (and (<= 1 n) (<= n v_num) (not (= n j)) (not (= n k)))
                    (= (v n (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j))) (v n (- (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j)) 1)))
                ))
            ) (and
                ; do not have this edge / do not use this edge
                (forall ((n Int))
                (=> (and (<= 1 n) (<= n v_num))
                    (= (v n (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j))) (v n (- (+ (div (* (- (* 2 v_num) j) (- j 1)) 2) (- k j)) 1)))
                ))
            ))
        ))
    )
)

(assert
    (and
        (forall ((n Int))
        (=> (and (<= 1 n) (<= n v_num))
            (= (v n (div (* v_num (- v_num 1)) 2)) 2)
        ))
    )
)

(check-sat)
(get-model)
